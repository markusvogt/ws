// Welt CI Colors

// Color values
// !! use the following tool when adding a new color http://chir.ag/projects/name-that-color !!
$wci--color-palette: (
        'black': (
                'blarz': #171b2d
        ),
        'white': (
                'white-solid': #fff
        ),
        'gray': (
                'boulder': #787878,
                'cod-gray': #1d1d1d,
                'mine-shaft': #393939,
                'dusty-gray': #9b9b9b,
                'mercury': #e4e4e4,
                "outer-space": #383e42
        ),
        'beige': (
                'cararra': #edece8,
                'desert-storm': #f9f9f8
        ),
        'blue': (
                'matisse': #246ea7,
                'prussian-blue': #003a5a,
                'teal-blue': #064b71
        ),
        'orange': (
                'carrot-orange': #f18825,
        ),
        'red': (
                'disco': #741057,
        ),
        'green': (
                'summer-green': #99b7a5
        )
) !default;

// ## Welt-Palette
// Internal names for better readability. 'welt-blue' is better than 'prussian-blue' - we use only this names
// [1] default welt blue
// [2] default welt orange
// [3] indicates the live state of content
// [4] indicates breaking news content
// [5] indicates gray bullet points
// [6] indicates channel teaser section + topic text
// [7] indicates all highlighted (normally 'welt-orange') elements in channel teaser
$wci-named-color-palette: (
        'welt-blue': 'prussian-blue', // [1]
        'welt-orange': 'carrot-orange', // [2]
        'live-state': 'carrot-orange', // [3]
        'breaking': 'carrot-orange', // [4]
        'gray-bullets': 'cararra', // [5]
        'channel-gray': 'outer-space', // [6]
        'channel-highlight': 'summer-green' // [7]
) !default;

// helper functions for colors

// get color key from $wci-named-color-palette
@function _wci-get-named-color($named-color) {
  @if map-has-key($wci-named-color-palette, $named-color) {
    $palette-key: map-get($wci-named-color-palette, $named-color);
    @return $palette-key;
  } @else {
    @warn "No color found for `#{$named-color}` in `$wci-named-color-palette` map.";
  }
}

// get color from $wci--color-palette
@function wci-color($color, $alpha: 1) {
  $color-keys: map-keys($wci--color-palette);

  @each $key in $color-keys {
    $color-map: map-get($wci--color-palette, $key);

    @if map-has-key($color-map, $color) {
      @return rgba(map-get($color-map, $color), $alpha);
    }
  }
  @warn "No color found for `#{$color}` in `$wci--color-palette` map.";
}

// get named color as rgba()
@function wci-named-color($named-color, $alpha: 1) {
  @return wci-color(_wci-get-named-color($named-color), $alpha);
}
